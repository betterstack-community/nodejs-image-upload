services:
  auth:
    build:
      dockerfile: auth.Dockerfile
      context: .
      target: ${NODE_ENV}
    container_name: auth-service
    environment:
      AUTH_PORT: ${AUTH_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI}
      REDIS_ADDR: ${REDIS_ADDR}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: [CMD, wget, -q, -S, -O, "-", "localhost:8000/health"]
    ports:
      - 8000:8000
    networks:
      - node-converter-upload-network
    volumes:
      - .:/node/app

  converter:
    build:
      dockerfile: converter.Dockerfile
      context: .
      target: ${NODE_ENV}
    container_name: converter-service
    environment:
      CONVERTER_PORT: ${CONVERTER_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
    env_file:
      - ./.env
    depends_on:
      auth:
        condition: service_healthy
    networks:
      - node-converter-upload-network
    volumes:
      - .:/node/app

  postgres:
    image: postgres:bookworm
    restart: always
    container_name: node-converter-upload-db
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [CMD-SHELL, "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - node-converter-upload-network

  redis:
    image: redis:bookworm
    container_name: node-converter-upload-redis
    restart: always
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 10s
      timeout: 3s
      retries: 5
    ports:
      - 6379:6379
    environment:
      - REDIS_DATABASE=0
    volumes:
      - redis:/var/lib/redis
      - redis-config:/usr/local/etc/redis/redis.conf
    networks:
      - node-converter-upload-network

  collector:
    container_name: node-converter-upload-collector
    image: otel/opentelemetry-collector:latest
    volumes:
      - ./otelcol.yaml:/etc/otelcol/config.yaml
    depends_on:
      jaeger:
        condition: service_healthy
    networks:
      - node-converter-upload-network

  jaeger:
    container_name: node-converter-upload-jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      JAEGER_PROPAGATION: w3c
    ports:
      - 16686:16686
    healthcheck:
      test: [CMD, wget, -q, -S, -O, "-", "localhost:14269"]
    networks:
      - node-converter-upload-network

volumes:
  pg-data:
  redis:
  redis-config:

networks:
  node-converter-upload-network:
